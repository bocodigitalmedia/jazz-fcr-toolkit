@mixin block {
  display: block;
  @include box-sizing(border-box);
}

@mixin bg($img, $position: 0 0, $repeat: no-repeat, $color: transparent, $attachment: scroll) {
  background: {
      color: $color;
      image: url(../images/#{$img});
      position: $position;
      repeat: $repeat;
      attachment: $attachment;
  }
}

@mixin image($url, $width, $height, $position: 0 0) {
  overflow: hidden;
  text-indent: -9000px;
  display: block;
  background: {
      image: url(../images/#{$url});
      position: $position;
      repeat: no-repeat;
      size: #{$width} #{$height};
  };
  width: #{$width};
  height: #{$height};
}

@mixin ctrh() {
  position: absolute;
  left: 50%;
  -webkit-transform: translateX(-50%);
}

@mixin ctrv() {
  position: absolute;
  top: 50%;
  -webkit-transform: translateY(-50%);
}

@mixin text-vertical-center() {
  position: relative;
  top: 50%;
  transform: perspective(1px) translateY(-50%);
}

@mixin box-shadow() {
  -webkit-box-shadow: 1px 1px 2px 0px rgba(0, 0, 0, 0.3);
  -moz-box-shadow: 1px 1px 2px 0px rgba(0, 0, 0, 0.3);
  box-shadow: 1px 1px 2px 0px rgba(0, 0, 0, 0.3);
}

// ================================================================================================

@mixin position($type: absolute, $top: 0, $left: 0, $bottom: auto, $right: auto, $zindex: auto) {

  @if( $top != auto) { @if (unitless($top)) { $top: $top * 1px; } }
  @if( $left != auto) { @if (unitless($left)) { $left: $left * 1px; } }
  @if( $bottom != auto) { @if (unitless($bottom)) { $bottom: $bottom * 1px; } }
  @if( $right != auto) { @if (unitless($right)) { $right: $right * 1px; } }

    position: $type;
    top:     if($top    == 'auto', $top,    $top);
    left:    if($left   == 'auto', $left,   $left);
    bottom:  if($bottom == 'auto', $bottom, $bottom);
    right:   if($right  == 'auto', $right,  $right);
    @if( $zindex != 'auto' ) { z-index: $zindex; }
}

@mixin absolute($top: 0, $left: 0, $bottom: auto, $right: auto, $zindex: auto) {
  @include position(absolute, $top, $left, $bottom, $right, $zindex);
}

@mixin sizex($width, $height) {

  @if (unitless($width)) {
    $width: $width * 1px;
  }

  @if (unitless($height)) {
    $height: $height * 1px;
  }

    width: $width;
    height: $height;
}

// ================================================================================================

@mixin photoshop-drop-shadow ($angle: 0, $distance: 0, $spread: 0, $size: 0, $color: #000, $inner: false) {
  $angle: (180 - $angle) * 3.1415926 / 180; // convert to radians
  // $angle: (180 - $angle) * pi() / 180; // convert to radians
  $h-shadow: round(cos($angle) * $distance);
  $v-shadow: round(sin($angle) * $distance);
  $css-spread: $size * $spread/100;
  $blur: ($size - $css-spread);
  $inset: if($inner != false, 'inset', '');

  box-shadow: $h-shadow $v-shadow $blur $css-spread $color unquote($inset);
}

// ================================================================================================

@function pow($number, $exp) {
  $value: 1;
  @if $exp > 0 {
    @for $i from 1 through $exp {
      $value: $value * $number;
    }
  }
  @else if $exp < 0 {
    @for $i from 1 through -$exp {
      $value: $value / $number;
    }
  }
  @return $value;
}

@function fact($number) {
  $value: 1;
  @if $number > 0 {
    @for $i from 1 through $number {
      $value: $value * $i;
    }
  }
  @return $value;
}

@function pi() {
  @return 3.14159265359;
}

@function rad($angle) {
  $unit: unit($angle);
  $unitless: $angle / ($angle * 0 + 1);
  // If the angle has 'deg' as unit, convert to radians.
  @if $unit == deg {
    $unitless: $unitless / 180 * pi();
  }
  @return $unitless;
}

@function sin($angle) {
  $sin: 0;
  $angle: rad($angle);
  // Iterate a bunch of times.
  @for $i from 0 through 10 {
    $sin: $sin + pow(-1, $i) * pow($angle, (2 * $i + 1)) / fact(2 * $i + 1);
  }
  @return $sin;
}

@function cos($angle) {
  $cos: 0;
  $angle: rad($angle);
  // Iterate a bunch of times.
  @for $i from 0 through 10 {
    $cos: $cos + pow(-1, $i) * pow($angle, 2 * $i) / fact(2 * $i);
  }
  @return $cos;
}

@function tan($angle) {
  @return sin($angle) / cos($angle);
}

// ================================================================================================

/// Stroke font-character
/// @param  {Integer} $stroke - Stroke width
/// @param  {Color}   $color  - Stroke color
/// @return {List}            - text-shadow list
@function stroke($stroke, $color) {
  $shadow: ();
  $from: $stroke*-1;
  @for $i from $from through $stroke {
   @for $j from $from through $stroke {
      $shadow: append($shadow, $i*1px $j*1px 0 $color, comma);
    }
  }
  @return $shadow;
}
/// Stroke font-character
/// @param  {Integer} $stroke - Stroke width
/// @param  {Color}   $color  - Stroke color
/// @return {Style}           - text-shadow
@mixin stroke($stroke, $color) {
  text-shadow: stroke($stroke, $color);
}

// ================================================================================================